import os
import os.path
import argparse
import sys
import time
from datetime import date


parser = argparse.ArgumentParser(description='attack summary report automated script')
parser.add_argument("-d", help="the target domain you are scanning", required=True)
parser.add_argument("-c", help="person running this script", required=True)
args = parser.parse_args()

def mirror_site(domain, pwd):
    split_domain = domain.split(".")
    wget = "wget -m -p -np -q -P " + pwd + "/mirror_" + split_domain[0] + " " + domain
    
    print("\033[1;37;40m[-] \033[1;33;40mRunning Site Mirroring")
    os.system(wget)
    
def network_discovery(domain, filename):

    ping = "ping " + domain + " -c 5" + " >> " + filename
    fragment = "ping " + domain + " -c 5 -M do -s 1427" + " >> " + filename
    nslookup = "nslookup -type=a -type=cname " + domain + " >> " + filename
    tracert = "traceroute -I -m 5 " + domain + " >> " + filename
    whois = "whois " + domain + " >> " + filename
    
    
    page_split = "echo '===============================' >> " + filename
    page_split2 = "echo '        NETWORK QUERIES        ' >> " + filename
    ping_logo = "echo '\n~~~~~~~~~~~~ PING ~~~~~~~~~~~~~' >> " + filename
    frag_logo = "echo '\n~~~~~~~~~ FRAGEMENTATION ~~~~~~~' >> " + filename
    trace_logo = "echo '\n~~~~~~~~~ TRACEROUTE ~~~~~~~~~~' >> " + filename
    dns_logo = "echo '\n~~~~~~~~~ NSLOOKUP ~~~~~~~~~~~~' >> " + filename
    whois_logo = "echo '\n~~~~~~~~~ WHOIS ~~~~~~~~~~~~~' >> " + filename
    page_split3 = "echo '===============================' >> " + filename
    
    print("\033[1;37;40m[-] \033[1;33;40mRunning Network Reconnaissance")
    os.system(page_split)
    os.system(page_split2)
    os.system(page_split3)
    
    os.system(ping_logo)
    os.system(ping)
    
    os.system(frag_logo)	
    os.system(fragment)
    
    os.system(trace_logo)
    os.system(tracert)
    
    os.system(dns_logo)
    os.system(nslookup)
    
    os.system(whois_logo)
    os.system(whois)


def infoga(domain, filename):
    infoga = "python /home/kali/infoga/infoga.py -d " + domain + " -s google -v 3" + " >> " + filename
    page_split = "echo '===============================' >> " + filename
    page_split2 = "echo '           INFOGA              ' >> " + filename
    page_split3 = "echo '===============================' >> " + filename
    
    print("\033[1;37;40m[-] \033[1;33;40mRunning Infoga Reconnaissance")
    os.system(page_split)
    os.system(page_split2)
    os.system(page_split3)
    os.system(infoga)
  
def social_network_sites(domain, filename):
    harvester = "theHarvester -d " + domain + " -l 200 -b linkedin" + " >> " + filename
    page_split = "echo '===============================' >> " + filename
    page_split2 = "echo '      SOCIAL NETWORK SITES     ' >> " + filename
    page_split3 = "echo '===============================' >> " + filename
    
    print("\033[1;37;40m[-] \033[1;33;40mRunning Social Network Reconnaissance")
    os.system(page_split)
    os.system(page_split2)
    os.system(page_split3)
    os.system(harvester)

def recon_ng(domain, creator, pwd):
     split_domain = domain.split(".")
     customer = split_domain[0]
     reconng_cli = pwd + "/" + customer + "_recon-ng_cli.txt"
     reconng_cli_people = pwd + "/" + customer + "_recon-ng_people_cli.txt"
     
     #DomainHosts commands
     #Dirbuster type command
     brute_force = "recon-cli -m recon/domains-hosts/brute_hosts -w DomainHosts -C 'db insert domains '" + domain + "~" + customer + " -c 'run' >> " + reconng_cli
     
     #reverse DNS lookup based on previous command
     reverse_resolution = "recon-cli -m recon/hosts-hosts/reverse_resolve -w DomainHosts -c 'run' >> " + reconng_cli
     
     #reconnaissance workspace commands
     #harvests data from website... doesn't work sometimes, so backup is also enabled w/ manual list required before running script
     POC_data = "recon-cli -m recon/domains-contacts/whois_pocs -w reconnaissance -o SOURCE=" + domain + ' -c "run" >> ' + reconng_cli
     
     #uncomment if API gets fixed for namechk
     #existence_of_names = "modules load recon/profiles-profiles/namechk"
     
     #finding accounts associated to names with the contacts/profiles database
     profiler_with_contactsDB = "recon-cli -m recon/profiles-profiles/profiler -w reconnaissance -o SOURCE=default -c 'run' >> " + reconng_cli 
     
     #running based off things found in profiles db
     profiler_with_list = "recon-cli -m recon/profiles-profiles/profiler -w reconnaissance -o SOURCE=default -c 'run' >> " + reconng_cli
     
     #reporting Commands
     reports_domain_host = "recon-cli -m reporting/html -w DomainHosts -o FILENAME=/home/kali/Desktop/" + customer + "_Gathered_Information/recon_domainhosts_" + customer + ".html" + " -o CREATOR='" + creator + "' -o CUSTOMER='" + customer + "' -c 'run' >> " + reconng_cli
     reports_reconnaissance = "recon-cli -m reporting/html -w reconnaissance -o FILENAME=/home/kali/Desktop/" + customer + "_Gathered_Information/recon_reconnaissance_" + customer + ".html" +" -o CREATOR='" + creator + "' -o CUSTOMER='" + customer + "' -c 'run' >> " + reconng_cli
     
     #cleanup before running recon-ng (prevents duplicates and cross entries)
     cleanup_DH_domains = 'recon-cli -w DomainHosts -C "db delete domains 1-500" >> ' + reconng_cli
     cleanup_DH_hosts = 'recon-cli -w DomainHosts -C "db delete hosts 1-500" >> ' + reconng_cli
     
     cleanup_R_profiles = 'recon-cli -w reconnaissance -C "db delete profiles 1-500" >> ' + reconng_cli
     cleanup_R_contacts = 'recon-cli -w reconnaissance -C "db delete contacts 1-500" >> ' + reconng_cli
     
     remove_dh_ws = 'rm -rf /root/.recon-ng/workspaces/DomainHosts'
     remove_r_ws = 'rm -rf /root/.recon-ng/workspaces/reconnassiance'

     
     #wiping database before running
     os.system(cleanup_R_contacts)
     os.system(cleanup_R_profiles)
     
     os.system(cleanup_DH_domains)
     os.system(cleanup_DH_hosts)
     
     os.system(remove_dh_ws)
     os.system(remove_r_ws)
     
     print("\033[1;37;40m[-] \033[1;33;40mRunning Recon-ng Reconnaissance")
     print("\033[1;30;40m	\x1B[3m[-] Starting Domain Reconnaissance")
     
     #domain_hosts_Workspace
     os.system(brute_force)
     os.system(reverse_resolution)
     print("\033[A                               \033[A")
     print("\033[1;30;40m	\x1B[3m[+] Domain Reconnaissance Finished")
     print("\033[1;30;40m	\x1B[3m[-] Starting People Reconnaissance")
     
     #Reconnaissance_workspace
     os.system(POC_data)
     os.system(profiler_with_contactsDB)
     
     #uncheck if API gets fixed for namechk
     #os.system(existence_of_names)
     
     # reads from the POC.txt file and runs the profiler module against it
     contact_counter = 0
     with open("POC.txt") as f:
         for line in f:
             line_strip = line.strip()
             contact_counter += 1
             add_to_profile_database = "recon-cli -m recon/profiles-profiles/profiler -w reconnaissance -c 'db insert profiles " + line_strip + "~~~~' >> " + reconng_cli 
             os.system(add_to_profile_database)

     os.system(profiler_with_list)

     print("\033[A                               \033[A")
     print("\033[1;30;40m	\x1B[3m[+] People Reconnaissance Finished")
     print("\033[1;30;40m	\x1B[3m[-] Generating Reports\x1B[0m")
     
     #generating reports
     os.system(reports_domain_host)
     os.system(reports_reconnaissance)
     
     #confirming reports
     recon_html_exists = os.path.exists("/home/kali/Desktop/" + customer + "_Gathered_Information/recon_reconnaissance_" + customer + ".html")
     domainhosts_html_exists = os.path.exists("/home/kali/Desktop/" + customer + "_Gathered_Information/recon_domainhosts_" + customer + ".html")
     
     #if reports failed it will try it again until status changes to true
     R_counter = 0
     while recon_html_exists == False:
     	os.system(reports_reconnaissance)
     	recon_html_exists = os.path.exists("/home/kali/Desktop/" + customer + "_Gathered_Information/recon_reconnaissance_" + customer + ".html")
     	if R_counter == 5:
     	    recon_html_exists = True
     	else:
     	    R_counter += 1

     DH_counter = 0
     while domainhosts_html_exists == False:
     	os.system(reports_domain_host)
     	domainhosts_html_exists = os.path.exists("/home/kali/Desktop/" + customer + "_Gathered_Information/recon_domainhosts_" + customer + ".html")
     	if DH_counter == 5:
     	    domainhosts_html_exists = True
     	else:
     	    DH_counter += 1

        
def create_file(domain):
    split_domain = domain.split(".")
    folder_name = split_domain[0] + "_Gathered_Information"
    
    
    file_path = "/home/kali/Desktop/" + split_domain[0] + "_Gathered_Information"
    file_created = "touch " + file_path + "/" + split_domain[0] + "_cli.txt"
    
    
    file_name = file_path + "/" + split_domain[0] + "_cli.txt"
    mkdir_companyfolder = "mkdir " + file_path
    
    
    os.system(mkdir_companyfolder)
    os.system(file_created)
    
    
    return file_name, file_path, folder_name

def animate_text():
    print("\033[1;37;40m===========================================================================")
    print("\033[1;34;40m                  _______  _______  _______")
    print("\033[1;34;40m                 (  ___  )(  ____ \(  ___  )")
    print("\033[1;34;40m                 | (   ) || (    \/| (   ) |")
    print("\033[1;34;40m                 | (___) || (_____ | (___) |")
    print("\033[1;34;40m                 |  ___  |(_____  )|  ___  |")
    print("\033[1;34;40m                 | (   ) |      ) || (   ) |")
    print("\033[1;34;40m                 | )   ( |/\____) || )   ( |")
    print("\033[1;34;40m                 |/     \|\_______)|/     \|")
    print("\033[1;37;40m===========================================================================")                           

def call_to_functions(domain, filename, creator, pwd):

    try:
        network_discovery(domain, filename)
        print("\033[A                               \033[A")
        print("\033[1;32;40m[✓] Network Reconnaissance Completed")
    except:
        print("\033[A                               \033[A")
        print("\033[1;31;40m[X] Network Discovery Failed")
        pass
    
    try:
        social_network_sites(domain, filename)
        print("\033[A                               \033[A")
        print("\033[1;32;40m[✓] Social Network Sites Reconnaissance Completed")
    except:
        print("\033[A                               \033[A")
        print("\033[1;31;40m[X] Social Network Sites Reconnaissance Failed")
        pass
    
    try:
        infoga(domain, filename)
        print("\033[A                               \033[A")
        print("\033[1;32;40m[✓] Email Reconaissance Completed")
    except:
        print("\033[A                               \033[A")
        print("\033[1;31;40m[X] Email Reconnaissance Failed")
        pass
        
    try:
        mirror_site(domain, pwd)
        print("\033[A                               \033[A")
        print("\033[1;32;40m[✓] Site Mirroring Completed")
    except:
        print("\033[A                               \033[A")
        print("\033[1;31;40m[X] Site Mirroring Failed")
        pass
    
    try:
       recon_ng(domain,creator, pwd)
       print("\033[A                                   \033[A")
       print("\033[A                                   \033[A")
       print("\033[A                                   \033[A")
       print("\033[A                                   \033[A")
       print("\033[1;32;40m[✓] Recon-ng Completed")
    except:
       print("\033[A                                   \033[A")
       print("\033[A                                   \033[A")
       print("\033[A                                   \033[A")
       print("\033[1;31;40m[X] Recon-ng Failed")
       pass
  	
def main():
    domain = args.d
    creator = args.c
    
    
    file_information = create_file(domain)
    filename = file_information[0]
    pwd = file_information[1]
    foldername = file_information[2]
    
    animate_text()
    call_to_functions(domain, filename, creator, pwd)
    print("\033[1;32;40m[✓]\033[1;37;40m Created folder: \033[1;34;40m" + foldername + "\033[1;37;40m within /home/kali/Desktop")
    
    
 
main()
